Create database practicejoins

CREATE TABLE customers (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    email VARCHAR(50)
)
select * from customers
insert into customers values(1,'saurabh','saurabhrajankar@gmial.com')
insert into customers values(2,'ashish','ashish@gmail.com')
insert into customers values(3,'pratik','pratik@gmail.com')

CREATE TABLE orders (
    id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
)
select * from orders
insert into orders values (1,1,'2022-04-04')
insert into orders values (2,2,'2022-04-05')
insert into orders values (3,3,'2022-04-06')

CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    price DECIMAL(10, 2)
)
insert into products values (1,'iphone',2500.00)
insert into products values (2,'Vivo',2000.00)
insert into products values (3,'Micromax',1500.00)


CREATE TABLE order_items (
    id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
)
insert into order_items values (1,1,1,20)
insert into order_items values (2,2,2,30)
insert into order_items values (3,3,3,40)

CREATE TABLE suppliers (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    address VARCHAR(100),
    phone VARCHAR(20)
)
insert into suppliers values (1,'Apple','Uk',8087732944)
insert into suppliers values (2,'mahindra','Nagpur',8087732944)
insert into suppliers values (3,'hero','nashik',8087732944)


--Which customers have placed orders on a certain date?
select * from customers inner join  orders on customers.id=orders.id where 
--What is the total amount spent by each customer on all of their orders?
--Which products have been ordered by each customer, and how many of each product have they ordered?
--Which customers have not placed any orders yet?
--Which suppliers have provided products that have been ordered by customers?
--What is the total revenue generated by each supplier's products?
--Which products have not been ordered yet?
--Which customers have ordered the most products in a given time period?
--Which customers have ordered products from multiple suppliers?
--What is the average price of the products ordered by each customer?

--Travel booking application: In a travel booking application, you could use a join to retrieve the flight or hotel details 
--and customer information for a specific booking. For example, you could join the bookings table with the flights table or 
--the hotels table and the customers table on the booking ID to get the booking details, customer names, and contact information.
create table customer
(
	customer_id int primary key identity,
	customer_name varchar(50),
	customer_no varchar(50)
)
insert into customer values ('saurabh',8087732944)
insert into customer values ('ashish',8087778111)

create table hotels
(
	hotel_id int primary key identity,
	hotel_name varchar(50),
	city varchar(50),
	country varchar(50)
)
insert into hotels values ('Radison','Nashik','india')
insert into hotels values ('Express','pune','india')
create table booking 
(
	booking_id int primary key identity,
	booking_date date,
	hotel_id int,
	customer_id int,
	foreign key (customer_id) references customer(customer_id),
	foreign key (hotel_id) references hotels(hotel_id)
)
insert into booking values (getdate(),1,1)
insert into booking values (getdate(),2,2)


select * from 
customer inner join booking on booking.customer_id=customer.customer_id
inner join hotels on hotels.hotel_id=booking.hotel_id

create or alter trigger inserting_details
on booking
after insert
as 
begin
declare @Hotel_Limit int= 1;
--if exists (SELECT hotel_id FROM hotels where hotel_id < @Hotel_Limit)
if exists (select * from hotels group by hotel_id having sum(hotel_id) <@Hotel_Limit)
begin
insert into booking(booking_date,hotel_id,customer_id)
select getdate(),hotel_id,customer_id from booking where hotel_id <@Hotel_Limit
end
else
begin
RAISERROR('Hotel is fully booked', 16, 1);
end
end



select * from booking
truncate table booking

INSERT INTO booking (booking_date, hotel_id, customer_id)
VALUES (GETDATE(), 2, 2);

